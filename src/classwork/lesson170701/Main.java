package classwork.lesson170701;

public class Main {
    public static void main(String[] args) {
        short x = 1;
        short y = 1;
        if(x == 1) {
            System.out.println(" ");
        }

        short z =(short) (x * y); // в арифм.операциях short-операнды автоматически приводятся к int
        while (true) {
            y++;
            if (y == 10){
                break;
            }
        }
        x++;
    }

    private static String m(int i) {
        return i < 1 ? "asd" : "dsa";
    }
}


//hw - append counters to genome & implement hash algorithm
//hw2 - поупражняться на codingbat с битовыми операциями; или не на codingbat xD; ну или с логическими
//hw3 - есть матрица, вывести на экран суммы эл-тов рядов, не содержащих отрицательных эл-тов
//можно почитать java puzzlers & effective java by Bloch, алгоритмы и Java Седжвика

/*
с устройством программы пока разобрались - пакеты, классы, поля, методы, конструкторы, инициализаторы, статики, вотэвер
разберемся с содержимым методов:(операции) - в принципе описаны на oracle.docs of sth
char походу все еще целочисленный - с ним работают операции инкремента
instaceof - это оператор сравнения (как == <= >=); Вообще говря не рекомендуемый, т.к. это шаг назад от полиморфизма. Но в переопределении equals() - норм
оператор присваивания имеет "возвращаемое" значение, т.е. является выражением
куча проблем с преобразованиями типов между собой
в арифметических операциях с разными типами данных все приводится к самому большому; кроме того не обрабатываетсся перполнение целочисленных типов
guard-condition - когда сначала обрабатываем кейс, который нам не подходит
    statements review:
-в if должно быть именно boolean выражение, nothing else; вложенные if - это не ок
-в switch можно юзать String, char, ENUM и целочисленные; там нужно выражение, как и в if; не забываем breaks, даже после default, т.к. он может идти не последним
вероятнее всего switch быстрее, чем iflseifelseifelseifelse т.к. сразу переходит к нужной строке; по-хорошему switch в ООП - не лучшая практика
в свиче можно юзать только константы, т.е. компилятор заранее строит таблицу переходов
-тернарный оператор
-циклы, еба; foreach юзается, когда нам не нужен индекс
-return; с точки зрения читабельности рекомендуют делать минимум точек выхода, но например guard-conditions - нормальный кейс.
-continue, break, break OUTER - kinda goto but not;
 */
