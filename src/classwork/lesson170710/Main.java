package classwork.lesson170710;

public class Main {
    public static void main(String[] args) {
        System.out.println(Integer.parseInt("122f"));
    }
}

// заделать дз как отдельный проект
//почекать методы wrapper'ов
//должен ли Value в хэшмапе быть Object'ом
//hw* сделать линкед лист через массив вместо клааса node - dafuq?
//hw1 переделать toString через StringBuilder
//hw2 написать remove для LinkedList по индексу
//чисто для себя можно добавить измерение времени работы метода в mytestframework


/*
refactor -> extract method - сделать метод из выделенного кода
Collections - аналог Arrays для коллекций
класс, в котором есть только поля, конструктор и геттеры+сеттеры называются POJO; не имеют поведения и по сути являются структурой
POJO - plain old java object; например - узлы в списках
traverse - общее название для обхода коллекции/whatever
при удалении по индексу обычно возвращают удаленный элемент, а по значению - boolean
    wrappers kinda
началось все с HashTable, кот была в Java 1.0
проблема массивов в том, что там индексы обязательно целые и идут подряд
если у объекта все поля final - объект immutable
в принципе можно писать table.put(1, obj); - сработает автоупаковка
wrappers лежат в java.lang
после обсуждения экзаменов офигенно про wrappers - пересмотреть
    про время и даты
лучше использовать LocalTime & LocalDate, в глобальных Date & Time дохера всего deprecated
крч на видео куча всякого не выше средней полезности
есть еще отдельный фреймворк - JMH - но никто не требует соу фар; говорят, он станет частью java, но это не точно
 */
