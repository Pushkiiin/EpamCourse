package classwork.lesson170629;

import classwork.lesson170629.classstructure.A;

public class Main {
    public static void main(String[] args) {
        System.out.println("asd");
        Class asd = A.class;
    }
}


//уточнить про то, является ли класс экземпляром класса Class? - является kinda
//что такое статик класс?

/*
поля класса инициализируются по умолчанию, в отличие от локальных переменных
при первом обращении к классу выполняются статические поля и блоки инициализации
обращанием к классу не считается объявление переменной соотв.типа и обращения к константам (final) класса
static дает ленивую инициализацию, что юзается например в синглтоне
в куче хранятся объекты - в т.ч. классы. Даже если мы не создаем экземпляра класса, там будут жить статические переменные
класс - объект класса Class
по сути вход в main - момент, когда появляется стек, где будут храниться локальные переменные
к статическим методам и полям обращаться надо через имя самого класса, т.к. по сути они только там и существуют
нет общего соглашения по именованию non-final static полей
    'bout static?   -   dunno
1) static int a = 1; // поле класса
2) static final int a = 1; // поле класса; константа
3) static метод
любой метод экземпляра можно заменить на статический метод, в который передается наш объект в качестве первого параметра
в статическом контексте this не существует
invoke - whatever; mb google it
внутри класса могут быть другие классы и интерфейсы
A.class - Здесь class - аналог this, т.к. указывает на свой класс как на объект
когда мы пишем new Whatever() где-то там вызывается либо конструктор, либо newInstance; но туда лезть на самом деле не надо
hiding - механизм перекрытия переменных с одинаковым именем
    порядок следования штук внутри класса
package - всегда в начале - обязательное условие, хоть и не обязательный элемент
import - сразу после package - обязательное условие, хоть и не обязательный элемент
должно обязательно быть описание класса. Вне класса кода быть не может
описание класса - поля, методы, блоки - в любом порядке

*/